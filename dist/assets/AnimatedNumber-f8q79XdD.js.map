{"version":3,"file":"AnimatedNumber-f8q79XdD.js","sources":["../../node_modules/motion-dom/dist/es/value/spring-value.mjs","../../node_modules/framer-motion/dist/es/value/use-spring.mjs","../../src/components/AnimatedNumber.tsx"],"sourcesContent":["import { motionValue } from './index.mjs';\nimport { JSAnimation } from '../animation/JSAnimation.mjs';\nimport { isMotionValue } from './utils/is-motion-value.mjs';\nimport { frame } from '../frameloop/frame.mjs';\n\n/**\n * Create a `MotionValue` that animates to its latest value using a spring.\n * Can either be a value or track another `MotionValue`.\n *\n * ```jsx\n * const x = motionValue(0)\n * const y = transformValue(() => x.get() * 2) // double x\n * ```\n *\n * @param transformer - A transform function. This function must be pure with no side-effects or conditional statements.\n * @returns `MotionValue`\n *\n * @public\n */\nfunction springValue(source, options) {\n    const initialValue = isMotionValue(source) ? source.get() : source;\n    const value = motionValue(initialValue);\n    attachSpring(value, source, options);\n    return value;\n}\nfunction attachSpring(value, source, options) {\n    const initialValue = value.get();\n    let activeAnimation = null;\n    let latestValue = initialValue;\n    let latestSetter;\n    const unit = typeof initialValue === \"string\"\n        ? initialValue.replace(/[\\d.-]/g, \"\")\n        : undefined;\n    const stopAnimation = () => {\n        if (activeAnimation) {\n            activeAnimation.stop();\n            activeAnimation = null;\n        }\n    };\n    const startAnimation = () => {\n        stopAnimation();\n        activeAnimation = new JSAnimation({\n            keyframes: [asNumber(value.get()), asNumber(latestValue)],\n            velocity: value.getVelocity(),\n            type: \"spring\",\n            restDelta: 0.001,\n            restSpeed: 0.01,\n            ...options,\n            onUpdate: latestSetter,\n        });\n    };\n    value.attach((v, set) => {\n        latestValue = v;\n        latestSetter = (latest) => set(parseValue(latest, unit));\n        frame.postRender(startAnimation);\n        return value.get();\n    }, stopAnimation);\n    let unsubscribe = undefined;\n    if (isMotionValue(source)) {\n        unsubscribe = source.on(\"change\", (v) => value.set(parseValue(v, unit)));\n        value.on(\"destroy\", unsubscribe);\n    }\n    return unsubscribe;\n}\nfunction parseValue(v, unit) {\n    return unit ? v + unit : v;\n}\nfunction asNumber(v) {\n    return typeof v === \"number\" ? v : parseFloat(v);\n}\n\nexport { attachSpring, springValue };\n","import { attachSpring, isMotionValue } from 'motion-dom';\nimport { useContext, useInsertionEffect } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { useMotionValue } from './use-motion-value.mjs';\nimport { useTransform } from './use-transform.mjs';\n\nfunction useSpring(source, options = {}) {\n    const { isStatic } = useContext(MotionConfigContext);\n    const getFromSource = () => (isMotionValue(source) ? source.get() : source);\n    // isStatic will never change, allowing early hooks return\n    if (isStatic) {\n        return useTransform(getFromSource);\n    }\n    const value = useMotionValue(getFromSource());\n    useInsertionEffect(() => {\n        return attachSpring(value, source, options);\n    }, [value, JSON.stringify(options)]);\n    return value;\n}\n\nexport { useSpring };\n","import React, { useEffect, memo, useCallback } from 'react';\nimport { motion, useMotionValue, useSpring, useTransform } from 'framer-motion';\n\n// 🛡️ Type definitions for better type safety\ninterface AnimatedNumberProps {\n  value: number;\n  className?: string;\n  format?: (val: number) => string;\n  inView?: boolean;\n}\n\n/**\n * 🎯 AnimatedNumber - Optimized animated number component with enhanced performance\n * @description Smoothly animates number changes with customizable formatting\n */\nconst AnimatedNumber: React.FC<AnimatedNumberProps> = memo(({ \n  value, \n  className, \n  format, \n  inView = true \n}) => {\n  // 🚀 Memoized motion values for better performance\n  const motionValue = useMotionValue(0);\n  const spring = useSpring(motionValue, { \n    stiffness: 100, \n    damping: 20,\n    mass: 0.5\n  });\n  \n  // 🚀 Memoized transform function\n  const display = useTransform(spring, useCallback((latest: number) => {\n    const v = Math.round(latest);\n    return format ? format(v) : v.toLocaleString();\n  }, [format]));\n\n  // 🚀 Optimized effect for value updates with performance improvements\n  useEffect(() => {\n    if (inView) {\n      // Use requestAnimationFrame for smoother animations\n      requestAnimationFrame(() => {\n      motionValue.set(value);\n      });\n    }\n  }, [value, inView, motionValue]);\n\n  return (\n    <motion.span \n      className={className}\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.3 }}\n    >\n      {display}\n    </motion.span>\n  );\n});\n\nAnimatedNumber.displayName = 'AnimatedNumber';\n\nexport default AnimatedNumber;\n"],"names":["attachSpring","value","source","options","initialValue","activeAnimation","latestValue","latestSetter","unit","stopAnimation","startAnimation","JSAnimation","asNumber","v","set","latest","parseValue","frame","unsubscribe","isMotionValue","useSpring","isStatic","useContext","MotionConfigContext","getFromSource","useTransform","useMotionValue","useInsertionEffect","AnimatedNumber","memo","className","format","inView","motionValue","spring","display","useCallback","useEffect","jsx","motion"],"mappings":"2FAyBA,SAASA,EAAaC,EAAOC,EAAQC,EAAS,CAC1C,MAAMC,EAAeH,EAAM,IAAG,EAC9B,IAAII,EAAkB,KAClBC,EAAcF,EACdG,EACJ,MAAMC,EAAO,OAAOJ,GAAiB,SAC/BA,EAAa,QAAQ,UAAW,EAAE,EAClC,OACAK,EAAgB,IAAM,CACpBJ,IACAA,EAAgB,KAAI,EACpBA,EAAkB,KAE1B,EACMK,EAAiB,IAAM,CACzBD,EAAa,EACbJ,EAAkB,IAAIM,EAAY,CAC9B,UAAW,CAACC,EAASX,EAAM,IAAG,CAAE,EAAGW,EAASN,CAAW,CAAC,EACxD,SAAUL,EAAM,YAAW,EAC3B,KAAM,SACN,UAAW,KACX,UAAW,IACX,GAAGE,EACH,SAAUI,CACtB,CAAS,CACL,EACAN,EAAM,OAAO,CAACY,EAAGC,KACbR,EAAcO,EACdN,EAAgBQ,GAAWD,EAAIE,EAAWD,EAAQP,CAAI,CAAC,EACvDS,EAAM,WAAWP,CAAc,EACxBT,EAAM,IAAG,GACjBQ,CAAa,EAChB,IAAIS,EACJ,OAAIC,EAAcjB,CAAM,IACpBgB,EAAchB,EAAO,GAAG,SAAWW,GAAMZ,EAAM,IAAIe,EAAWH,EAAGL,CAAI,CAAC,CAAC,EACvEP,EAAM,GAAG,UAAWiB,CAAW,GAE5BA,CACX,CACA,SAASF,EAAWH,EAAGL,EAAM,CACzB,OAAOA,EAAOK,EAAIL,EAAOK,CAC7B,CACA,SAASD,EAASC,EAAG,CACjB,OAAO,OAAOA,GAAM,SAAWA,EAAI,WAAWA,CAAC,CACnD,CC/DA,SAASO,EAAUlB,EAAQC,EAAU,GAAI,CACrC,KAAM,CAAE,SAAAkB,CAAQ,EAAKC,EAAAA,WAAWC,CAAmB,EAC7CC,EAAgB,IAAOL,EAAcjB,CAAM,EAAIA,EAAO,IAAG,EAAKA,EAEpE,GAAImB,EACA,OAAOI,EAAaD,CAAa,EAErC,MAAMvB,EAAQyB,EAAeF,GAAe,EAC5CG,OAAAA,EAAAA,mBAAmB,IACR3B,EAAaC,EAAOC,EAAQC,CAAO,EAC3C,CAACF,EAAO,KAAK,UAAUE,CAAO,CAAC,CAAC,EAC5BF,CACX,CCHA,MAAM2B,EAAgDC,EAAAA,KAAK,CAAC,CAC1D,MAAA5B,EACA,UAAA6B,EACA,OAAAC,EACA,OAAAC,EAAS,EACX,IAAM,CAEJ,MAAMC,EAAcP,EAAe,CAAC,EAC9BQ,EAASd,EAAUa,EAAa,CACpC,UAAW,IACX,QAAS,GACT,KAAM,EAAA,CACP,EAGKE,EAAUV,EAAaS,EAAQE,EAAAA,YAAarB,GAAmB,CACnE,MAAMF,EAAI,KAAK,MAAME,CAAM,EAC3B,OAAOgB,EAASA,EAAOlB,CAAC,EAAIA,EAAE,eAAA,CAChC,EAAG,CAACkB,CAAM,CAAC,CAAC,EAGZM,OAAAA,EAAAA,UAAU,IAAM,CACVL,GAEF,sBAAsB,IAAM,CAC5BC,EAAY,IAAIhC,CAAK,CACrB,CAAC,CAEL,EAAG,CAACA,EAAO+B,EAAQC,CAAW,CAAC,EAG7BK,EAAAA,IAACC,EAAO,KAAP,CACC,UAAAT,EACA,QAAS,CAAE,QAAS,CAAA,EACpB,QAAS,CAAE,QAAS,CAAA,EACpB,WAAY,CAAE,SAAU,EAAA,EAEvB,SAAAK,CAAA,CAAA,CAGP,CAAC,EAEDP,EAAe,YAAc","x_google_ignoreList":[0,1]}