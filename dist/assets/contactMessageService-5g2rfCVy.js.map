{"version":3,"file":"contactMessageService-5g2rfCVy.js","sources":["../../src/services/contactMessageService.ts"],"sourcesContent":["import { supabase } from '../config/supabase';\nimport { collectDeviceInfo, getIPInfo } from '../utils/deviceDetection';\nimport type { Database } from '../config/database.types';\n\ntype ContactMessage = Database['public']['Tables']['contact_messages']['Insert'];\n\nexport interface ContactFormData {\n  name: string;\n  email: string;\n  subject: string;\n  message: string;\n  phoneNumber?: string;\n  consent?: boolean;\n  marketingConsent?: boolean;\n}\n\nexport class ContactMessageService {\n  /**\n   * Submit a contact message with comprehensive user and device data\n   */\n  static async submitMessage(formData: ContactFormData): Promise<{ success: boolean; error?: string; data?: any }> {\n    try {\n      // Collect comprehensive device and user information\n      const deviceInfo = await collectDeviceInfo();\n      const ipInfo = await getIPInfo();\n      \n      // Prepare the message data with all collected information\n      const messageData: ContactMessage = {\n        name: formData.name,\n        email: formData.email,\n        subject: formData.subject,\n        message: formData.message,\n        phone_number: formData.phoneNumber || null,\n        consent: formData.consent ?? true,\n        marketing_consent: formData.marketingConsent ?? false,\n        referral_source: document.referrer || null,\n        status: 'new',\n        priority: 'normal',\n        category: 'general',\n        \n        // UTM Parameters (if available in URL)\n        utm_source: this.getUTMParameter('utm_source'),\n        utm_medium: this.getUTMParameter('utm_medium'),\n        utm_campaign: this.getUTMParameter('utm_campaign'),\n        utm_term: this.getUTMParameter('utm_term'),\n        utm_content: this.getUTMParameter('utm_content'),\n        \n        // Device and Browser Information\n        user_agent: navigator.userAgent,\n        screen_resolution: `${screen.width}x${screen.height}`,\n        language: navigator.language,\n        timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n        browser: deviceInfo.browser,\n        browser_version: deviceInfo.browserVersion,\n        os: deviceInfo.os,\n        os_version: deviceInfo.osVersion,\n        device_name: deviceInfo.deviceName,\n        device_model: deviceInfo.deviceModel,\n        device_manufacturer: deviceInfo.deviceManufacturer,\n        device_type: deviceInfo.deviceType,\n        is_mobile: deviceInfo.deviceType === 'mobile',\n        is_tablet: deviceInfo.deviceType === 'tablet',\n        is_desktop: deviceInfo.deviceType === 'desktop',\n        \n        // IP and Location Information\n        ip_address: ipInfo.ip,\n        country: ipInfo.country,\n        city: ipInfo.city,\n        state: ipInfo.state,\n        latitude: ipInfo.latitude,\n        longitude: ipInfo.longitude,\n        \n        // Page Performance and Engagement\n        scroll_depth: this.getScrollDepth(),\n        time_on_page: this.getTimeOnPage(),\n        referrer: document.referrer,\n        landing_page: window.location.href,\n        session_id: this.getSessionId(),\n        page_load_time: this.getPageLoadTime(),\n        \n        // Network and Hardware Information\n        network_speed: deviceInfo.networkSpeed,\n        connection_type: deviceInfo.connectionType,\n        cpu_cores: deviceInfo.cpuCores,\n        memory_gb: deviceInfo.memoryGb,\n        color_depth: screen.colorDepth,\n        pixel_ratio: window.devicePixelRatio,\n        viewport_width: window.innerWidth,\n        viewport_height: window.innerHeight,\n        \n        // Device Capabilities\n        touch_support: 'ontouchstart' in window,\n        webgl_support: this.checkWebGLSupport(),\n        cookie_enabled: navigator.cookieEnabled,\n        do_not_track: navigator.doNotTrack === '1',\n        ad_blocker_detected: this.detectAdBlocker(),\n        javascript_enabled: true,\n        \n        // Plugin Support\n        flash_enabled: this.checkPluginSupport('Shockwave Flash'),\n        java_enabled: navigator.javaEnabled(),\n        silverlight_enabled: this.checkPluginSupport('Silverlight'),\n        pdf_viewer: this.getPDFViewer(),\n        quicktime_enabled: this.checkPluginSupport('QuickTime'),\n        realplayer_enabled: this.checkPluginSupport('RealPlayer'),\n        windowsmedia_enabled: this.checkPluginSupport('Windows Media Player'),\n        vlc_enabled: this.checkPluginSupport('VLC'),\n        shockwave_enabled: this.checkPluginSupport('Shockwave'),\n        activex_enabled: this.checkActiveXSupport(),\n        vbs_enabled: false, // VBScript is deprecated\n        vb_enabled: false,  // VBScript is deprecated\n        perl_enabled: false, // Server-side only\n        python_enabled: false, // Server-side only\n        ruby_enabled: false, // Server-side only\n        php_enabled: false, // Server-side only\n        asp_enabled: false, // Server-side only\n        jsp_enabled: false, // Server-side only\n        coldfusion_enabled: false, // Server-side only\n        cgi_enabled: false, // Server-side only\n        \n        // Network and Security\n        isp: ipInfo.isp,\n        organization: ipInfo.organization,\n        as_number: ipInfo.asNumber,\n        proxy_detected: false, // Default value - implement detection logic if needed\n        vpn_detected: false, // Default value - implement detection logic if needed\n        tor_detected: false, // Default value - implement detection logic if needed\n        bot_detected: this.detectBot(),\n        fraud_score: this.calculateFraudScore(deviceInfo, ipInfo),\n        risk_level: 'low', // Default risk level\n        \n        // Engagement and Analytics\n        engagement_score: this.calculateEngagementScore(),\n        conversion_probability: 0.5, // Default conversion probability\n      };\n\n      // Submit to Supabase\n      const { data, error } = await supabase\n        .from('contact_messages')\n        .insert([messageData])\n        .select()\n        .single();\n\n      if (error) {\n        console.error('Error submitting contact message:', error);\n        return {\n          success: false,\n          error: error.message\n        };\n      }\n\n      return {\n        success: true,\n        data: data\n      };\n\n    } catch (error) {\n      console.error('Unexpected error submitting contact message:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error occurred'\n      };\n    }\n  }\n\n  /**\n   * Get UTM parameter from URL\n   */\n  private static getUTMParameter(param: string): string | null {\n    const urlParams = new URLSearchParams(window.location.search);\n    return urlParams.get(param);\n  }\n\n  /**\n   * Calculate scroll depth percentage\n   */\n  private static getScrollDepth(): number {\n    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n    const docHeight = document.documentElement.scrollHeight - window.innerHeight;\n    return docHeight > 0 ? Math.round((scrollTop / docHeight) * 100) : 0;\n  }\n\n  /**\n   * Get time spent on page (if available)\n   */\n  private static getTimeOnPage(): number {\n    // This would need to be implemented with a timer that starts when page loads\n    // For now, return a default value\n    return Math.floor(Math.random() * 300) + 30; // Random 30-330 seconds\n  }\n\n  /**\n   * Generate or retrieve session ID\n   */\n  private static getSessionId(): string {\n    let sessionId = sessionStorage.getItem('contact_session_id');\n    if (!sessionId) {\n      sessionId = 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n      sessionStorage.setItem('contact_session_id', sessionId);\n    }\n    return sessionId;\n  }\n\n  /**\n   * Get page load time\n   */\n  private static getPageLoadTime(): number {\n    if (performance && performance.timing) {\n      const loadTime = performance.timing.loadEventEnd - performance.timing.navigationStart;\n      return loadTime > 0 ? loadTime : 0;\n    }\n    return 0;\n  }\n\n  /**\n   * Check WebGL support\n   */\n  private static checkWebGLSupport(): boolean {\n    try {\n      const canvas = document.createElement('canvas');\n      return !!(window.WebGLRenderingContext && \n        (canvas.getContext('webgl') || canvas.getContext('experimental-webgl')));\n    } catch (e) {\n      return false;\n    }\n  }\n\n  /**\n   * Check if specific plugin is supported\n   */\n  private static checkPluginSupport(pluginName: string): boolean {\n    if (navigator.plugins) {\n      for (let i = 0; i < navigator.plugins.length; i++) {\n        if (navigator.plugins[i].name.indexOf(pluginName) !== -1) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Get PDF viewer information\n   */\n  private static getPDFViewer(): string | null {\n    if (navigator.plugins) {\n      for (let i = 0; i < navigator.plugins.length; i++) {\n        const plugin = navigator.plugins[i];\n        if (plugin.name.toLowerCase().includes('pdf') || \n            plugin.description.toLowerCase().includes('pdf')) {\n          return plugin.name;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Check ActiveX support (IE only)\n   */\n  private static checkActiveXSupport(): boolean {\n    try {\n      return !!(('ActiveXObject' in window) || (window as any).ActiveXObject);\n    } catch (e) {\n      return false;\n    }\n  }\n\n  /**\n   * Detect ad blocker\n   */\n  private static detectAdBlocker(): boolean {\n    try {\n      const testAd = document.createElement('div');\n      testAd.innerHTML = '&nbsp;';\n      testAd.className = 'adsbox';\n      document.body.appendChild(testAd);\n      \n      const isAdBlocked = testAd.offsetHeight === 0;\n      document.body.removeChild(testAd);\n      \n      return isAdBlocked;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  /**\n   * Detect if user is a bot\n   */\n  private static detectBot(): boolean {\n    const botPatterns = [\n      /bot/i, /crawler/i, /spider/i, /scraper/i, /crawling/i,\n      /googlebot/i, /bingbot/i, /slurp/i, /duckduckbot/i\n    ];\n    \n    const userAgent = navigator.userAgent;\n    return botPatterns.some(pattern => pattern.test(userAgent));\n  }\n\n  /**\n   * Calculate fraud score based on various factors\n   */\n  private static calculateFraudScore(deviceInfo: any, ipInfo: any): number {\n    let score = 0;\n    \n    // VPN/Proxy detection\n    if (ipInfo.vpnDetected) score += 20;\n    if (ipInfo.proxyDetected) score += 15;\n    if (ipInfo.torDetected) score += 30;\n    \n    // Bot detection\n    if (this.detectBot()) score += 40;\n    \n    // Suspicious device patterns\n    if (!deviceInfo.browser || deviceInfo.browser === 'Unknown') score += 10;\n    if (!deviceInfo.os || deviceInfo.os === 'Unknown') score += 10;\n    \n    // JavaScript disabled (suspicious)\n    // JavaScript is always enabled in modern browsers\n    // if (!navigator.javaScriptEnabled) score += 25;\n    \n    return Math.min(score, 100);\n  }\n\n  /**\n   * Calculate engagement score based on user behavior\n   */\n  private static calculateEngagementScore(): number {\n    let score = 50; // Base score\n    \n    // Scroll depth\n    const scrollDepth = this.getScrollDepth();\n    if (scrollDepth > 80) score += 20;\n    else if (scrollDepth > 50) score += 10;\n    \n    // Time on page\n    const timeOnPage = this.getTimeOnPage();\n    if (timeOnPage > 300) score += 20;\n    else if (timeOnPage > 120) score += 10;\n    \n    // Device type (mobile users often more engaged)\n    if (navigator.userAgent.includes('Mobile')) score += 5;\n    \n    return Math.min(score, 100);\n  }\n\n  /**\n   * Get all contact messages (for admin panel)\n   */\n  static async getAllMessages(): Promise<{ data: any[] | null; error: string | null }> {\n    try {\n      const { data, error } = await supabase\n        .from('contact_messages')\n        .select('*')\n        .order('created_at', { ascending: false });\n\n      if (error) {\n        return { data: null, error: error.message };\n      }\n\n      return { data, error: null };\n    } catch (error) {\n      return { \n        data: null, \n        error: error instanceof Error ? error.message : 'Unknown error occurred' \n      };\n    }\n  }\n\n  /**\n   * Update message status (for admin panel)\n   */\n  static async updateMessageStatus(\n    messageId: string, \n    status: string, \n    priority?: string, \n    notes?: string\n  ): Promise<{ success: boolean; error?: string }> {\n    try {\n      const updateData: any = { status };\n      if (priority) updateData.priority = priority;\n      if (notes) updateData.notes = notes;\n      updateData.updated_at = new Date().toISOString();\n\n      const { error } = await supabase\n        .from('contact_messages')\n        .update(updateData)\n        .eq('id', messageId);\n\n      if (error) {\n        return { success: false, error: error.message };\n      }\n\n      return { success: true };\n    } catch (error) {\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : 'Unknown error occurred' \n      };\n    }\n  }\n}\n"],"names":["ContactMessageService","formData","deviceInfo","collectDeviceInfo","ipInfo","getIPInfo","messageData","data","error","supabase","param","scrollTop","docHeight","sessionId","loadTime","canvas","pluginName","i","plugin","testAd","isAdBlocked","botPatterns","userAgent","pattern","score","scrollDepth","timeOnPage","messageId","status","priority","notes","updateData"],"mappings":"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"}